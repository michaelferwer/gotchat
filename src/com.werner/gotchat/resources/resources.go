// Code generated by go-bindata.
// sources:
// resources/websocket.html
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesWebsocketHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x54\xc1\x8e\xda\x30\x10\xbd\xf3\x15\x83\x0f\x4b\x90\x4a\xb2\xbd\xa1\xdd\x84\x43\xab\x4a\xed\xa9\x07\x2a\xf5\x6c\x9c\x21\xb8\x6b\xec\xc8\x9e\x90\xa2\x6a\xff\xbd\xb6\xc3\x86\x94\x82\xb2\xed\x61\x2f\x04\xcf\x78\xde\xf3\xf3\x3c\x4f\x3e\x2d\x8d\xa0\x63\x8d\xb0\xa3\xbd\x5a\x4d\xf2\xf0\x01\xc5\x75\x55\xb0\xad\x65\x21\x80\xbc\x5c\x4d\x00\xf2\x3d\x12\x07\xb1\xe3\xd6\x21\x15\xac\xa1\xed\x62\xc9\x62\x82\x24\x29\x5c\x7d\x93\x64\x11\x4a\xf4\xc5\x50\xf3\x0a\xf3\xac\x8b\x4f\xf2\xac\x83\xc8\x37\xa6\x3c\xc6\x82\x4d\x43\x64\x34\xc8\xb2\x98\x99\x1a\xf5\xa2\xc5\x8d\x33\xe2\x09\x69\xb6\xfa\xea\xd7\xf0\x1d\x37\xeb\xb8\xce\xb3\x6e\xeb\x65\x95\x43\x5d\x2e\xf6\xe8\x9c\xe7\x99\xad\xd6\x7e\x05\xa7\xd5\xad\x0a\xa1\x8c\xc3\x21\xd1\xc7\x10\xb8\xc1\xe4\x84\x95\x35\x41\xb8\x96\x82\xf1\xba\x56\x52\x70\x92\x46\x67\x3f\xf8\x81\x77\xc9\xa8\x1c\xe0\xc0\x2d\xb4\x2f\x18\x8f\x93\x18\xf3\x17\xda\xec\x51\x53\x5a\x21\x7d\x52\x18\xfe\x7e\x38\x7e\x29\x93\x4b\xad\xf3\xd4\x68\xe1\xa1\x9f\xa0\x80\x6d\xa3\x45\x60\x48\xf0\xe0\xb7\xcf\x7f\x45\x20\x00\xb9\x85\xa4\x87\x87\xa2\x00\xdd\x28\xd5\x67\x01\x06\x39\xd0\xd8\x9e\xe5\x24\xac\x75\x0f\x59\xa6\x8c\xe0\x6a\x67\x1c\x3d\x2c\xef\x97\xf7\x59\xeb\x32\x14\x3b\xc3\xe6\x8f\x3d\x82\x30\xda\x19\x85\xa9\x32\x55\xc2\xfa\x72\x90\x5a\x92\xe4\x84\xec\x5d\x4f\x91\x5a\xdf\xc5\xe3\x9a\x7c\x74\x50\x7f\x4e\x1b\x1d\xf4\x0d\xb4\xc0\x49\x0c\x9c\xcf\x7b\x93\x2f\x94\x62\x39\xca\xf6\x7c\x9d\xf8\xd4\xfb\x7f\xe1\x8e\xe9\xb4\xe4\xc4\x87\xf0\x57\xd1\xa3\x75\xfe\x53\x57\xac\x1d\xd7\x75\xd1\x49\xdf\xe4\xbf\x0f\xd5\x7d\x9f\x47\x3c\xf6\xc7\xcb\x78\x95\xc3\x06\x06\x9b\x76\xdc\x70\x77\x07\xd7\x0e\x1c\x0c\xf8\xfe\x9a\xfb\xd2\xc0\x9a\xb0\xcf\x68\x71\xe6\xc0\x99\x3d\x02\xe1\x4f\xff\x80\x76\x3c\xfc\x20\x38\xb4\x07\xb4\x20\x1d\x34\xb6\xf2\xf4\xea\x08\xbc\xe5\xde\x62\xba\x9a\x9e\xdd\xf8\x3a\x85\x97\x2f\xf9\xcd\x44\x46\xe2\x64\xfc\xed\x84\x7d\x5e\xd8\x48\xd3\x5f\xc4\xfa\x71\x93\x75\x23\x25\x4c\xca\x6e\x44\xfa\x89\x19\x87\xf1\xef\x00\x00\x00\xff\xff\xb4\x0f\x4a\xe9\x9d\x05\x00\x00")

func resourcesWebsocketHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesWebsocketHtml,
		"resources/websocket.html",
	)
}

func resourcesWebsocketHtml() (*asset, error) {
	bytes, err := resourcesWebsocketHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/websocket.html", size: 1437, mode: os.FileMode(436), modTime: time.Unix(1453886740, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/websocket.html": resourcesWebsocketHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"websocket.html": &bintree{resourcesWebsocketHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

